'
@Misc{tomcom_mathemathical_2022,
  author  = {Tamás Demus},
  month   = dec,
  note    = {original-date: 2022-12-02T20:47:30Z},
  title   = {Mathemathical {Modeling} {Practice} - {Railway} track defect detection},
  year    = {2022},
  url     = {https://github.com/demustamas/Mathemathical-Modeling-Practice},
  urldate = {2023-05-23},
}

@Online{_mav_,
  title   = {{MÁV} Központi Felépítményvizsgáló Kft.},
  url     = {http://www.mavkfv.hu/index.php?lngchg=en&f=},
  urldate = {2023-05-23},
}

'
@Misc{_ai_,
  title    = {{AI} {Research} {Group} – {Artificial} {Intelligence} \& {Data} {Science}},
  language = {en-US},
  url      = {https://ai.elte.hu/},
  urldate  = {2023-05-23},
}

'
@Misc{_ai&ml_,
  title    = {{AI}\&{ML} {Training} – {AI} {Research} {Group}},
  language = {en-US},
  url      = {https://ai.elte.hu/training/},
  urldate  = {2023-05-23},
}

@Online{_railway_,
  ranking    = {rank3},
  readstatus = {read},
  relevance  = {relevant},
  title      = {Railway Track Fault Detection {\textbar} Kaggle},
  url        = {https://www.kaggle.com/datasets/salmaneunus/railway-track-fault-detection},
  urldate    = {2022-12-22},
}

@Booklet{kfv_25years,
  title = {The MÁV Central Rail and Track Inspection Ltd. 25 years},
  year  = {2021},
  url   = {http://www.mavkfv.hu/index.php?f=kfv25},
}

@book{Goodfellow-et-al-2016,
    title={Deep Learning},
    author={Ian Goodfellow and Yoshua Bengio and Aaron Courville},
    publisher={MIT Press},
    note={\url{http://www.deeplearningbook.org}},
    year={2016}
}

'
@Misc{_autoencoder_2023,
  month     = may,
  note      = {Page Version ID: 1153796242},
  title     = {Autoencoder},
  year      = {2023},
  abstract  = {An autoencoder is a type of artificial neural network used to learn efficient codings of unlabeled data (unsupervised learning). An autoencoder learns two functions: an encoding function that transforms the input data, and a decoding function that recreates the input data from the encoded representation. The autoencoder learns an efficient representation (encoding) for a set of data, typically for dimensionality reduction.
Variants exist, aiming to force the learned representations to assume useful properties. Examples are regularized autoencoders (Sparse, Denoising and Contractive), which are effective in learning representations for subsequent classification tasks, and Variational autoencoders, with applications as generative models. Autoencoders are applied to many problems, including facial recognition, feature detection, anomaly detection and acquiring the meaning of words. Autoencoders are also generative models which can randomly generate new data that is similar to the input data (training data).},
  copyright = {Creative Commons Attribution-ShareAlike License},
  language  = {en},
  url       = {https://en.wikipedia.org/w/index.php?title=Autoencoder&oldid=1153796242},
  urldate   = {2023-05-24},
}

'
@Misc{khosla_auto_2021,
  author     = {Khosla, Ritwek},
  month      = jan,
  title      = {Auto-{Encoders} for {Computer} {Vision}: {An} {Endless} world of {Possibilities}},
  year       = {2021},
  abstract   = {Auto-Encoders are sequential neural networks consisting of two components: an Encoder followed by a Decoder. Learn what are auto encoders.},
  journal    = {Analytics Vidhya},
  language   = {en},
  shorttitle = {Auto-{Encoders} for {Computer} {Vision}},
  url        = {https://www.analyticsvidhya.com/blog/2021/01/auto-encoders-for-computer-vision-an-endless-world-of-possibilities/},
  urldate    = {2023-05-24},
}

'
@TechReport{simonyan_very_2015,
  author   = {Simonyan, Karen and Zisserman, Andrew},
  title    = {Very {Deep} {Convolutional} {Networks} for {Large}-{Scale} {Image} {Recognition}},
  year     = {2015},
  month    = apr,
  note     = {arXiv:1409.1556 [cs] type: article},
  abstract = {In this work we investigate the effect of the convolutional network depth on its accuracy in the large-scale image recognition setting. Our main contribution is a thorough evaluation of networks of increasing depth using an architecture with very small (3x3) convolution filters, which shows that a significant improvement on the prior-art configurations can be achieved by pushing the depth to 16-19 weight layers. These findings were the basis of our ImageNet Challenge 2014 submission, where our team secured the first and the second places in the localisation and classification tracks respectively. We also show that our representations generalise well to other datasets, where they achieve state-of-the-art results. We have made our two best-performing ConvNet models publicly available to facilitate further research on the use of deep visual representations in computer vision.},
  file     = {arXiv Fulltext PDF:https\://arxiv.org/pdf/1409.1556.pdf:application/pdf},
  keywords = {Computer Science - Computer Vision and Pattern Recognition},
  school   = {arXiv},
  url      = {http://arxiv.org/abs/1409.1556},
  urldate  = {2023-05-26},
}

'
@TechReport{he_deep_2015,
  author   = {He, Kaiming and Zhang, Xiangyu and Ren, Shaoqing and Sun, Jian},
  title    = {Deep {Residual} {Learning} for {Image} {Recognition}},
  year     = {2015},
  month    = dec,
  note     = {arXiv:1512.03385 [cs] type: article},
  abstract = {Deeper neural networks are more difficult to train. We present a residual learning framework to ease the training of networks that are substantially deeper than those used previously. We explicitly reformulate the layers as learning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We provide comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets with a depth of up to 152 layers---8x deeper than VGG nets but still having lower complexity. An ensemble of these residual nets achieves 3.57\% error on the ImageNet test set. This result won the 1st place on the ILSVRC 2015 classification task. We also present analysis on CIFAR-10 with 100 and 1000 layers. The depth of representations is of central importance for many visual recognition tasks. Solely due to our extremely deep representations, we obtain a 28\% relative improvement on the COCO object detection dataset. Deep residual nets are foundations of our submissions to ILSVRC \& COCO 2015 competitions, where we also won the 1st places on the tasks of ImageNet detection, ImageNet localization, COCO detection, and COCO segmentation.},
  annote   = {Comment: Tech report},
  doi      = {10.48550/arXiv.1512.03385},
  file     = {arXiv Fulltext PDF:https\://arxiv.org/pdf/1512.03385.pdf:application/pdf},
  keywords = {Computer Science - Computer Vision and Pattern Recognition},
  school   = {arXiv},
  url      = {http://arxiv.org/abs/1512.03385},
  urldate  = {2023-05-26},
}

'
@TechReport{tan_efficientnetv2_2021,
  author     = {Tan, Mingxing and Le, Quoc V.},
  title      = {{EfficientNetV2}: {Smaller} {Models} and {Faster} {Training}},
  year       = {2021},
  month      = jun,
  note       = {arXiv:2104.00298 [cs] type: article},
  abstract   = {This paper introduces EfficientNetV2, a new family of convolutional networks that have faster training speed and better parameter efficiency than previous models. To develop this family of models, we use a combination of training-aware neural architecture search and scaling, to jointly optimize training speed and parameter efficiency. The models were searched from the search space enriched with new ops such as Fused-MBConv. Our experiments show that EfficientNetV2 models train much faster than state-of-the-art models while being up to 6.8x smaller. Our training can be further sped up by progressively increasing the image size during training, but it often causes a drop in accuracy. To compensate for this accuracy drop, we propose to adaptively adjust regularization (e.g., dropout and data augmentation) as well, such that we can achieve both fast training and good accuracy. With progressive learning, our EfficientNetV2 significantly outperforms previous models on ImageNet and CIFAR/Cars/Flowers datasets. By pretraining on the same ImageNet21k, our EfficientNetV2 achieves 87.3\% top-1 accuracy on ImageNet ILSVRC2012, outperforming the recent ViT by 2.0\% accuracy while training 5x-11x faster using the same computing resources. Code will be available at https://github.com/google/automl/tree/master/efficientnetv2.},
  annote     = {Comment: ICML 2021},
  doi        = {10.48550/arXiv.2104.00298},
  file       = {arXiv Fulltext PDF:https\://arxiv.org/pdf/2104.00298.pdf:application/pdf},
  keywords   = {Computer Science - Computer Vision and Pattern Recognition},
  school     = {arXiv},
  shorttitle = {{EfficientNetV2}},
  url        = {http://arxiv.org/abs/2104.00298},
  urldate    = {2023-05-26},
}

'
@Misc{_anomaly_2023,
  month     = may,
  note      = {Page Version ID: 1153438169},
  title     = {Anomaly detection},
  year      = {2023},
  abstract  = {In data analysis, anomaly detection (also referred to as outlier detection and sometimes as novelty detection) is generally understood to be the identification of rare items, events or observations which deviate significantly from the majority of the data and do not conform to a well defined notion of normal behaviour. Such examples may arouse suspicions of being generated by a different mechanism, or appear inconsistent with the remainder of that set of data.Anomaly detection finds application in many domains including cyber security, medicine, machine vision, statistics, neuroscience, law enforcement and financial fraud to name only a few. Anomalies were initially searched for clear rejection or omission from the data to aid statistical analysis, for example to compute the mean or standard deviation. They were also removed to better predictions from models such as linear regression, and more recently their removal aids the performance of machine learning algorithms. However, in many applications anomalies themselves are of interest and are the observations most desirous in the entire data set, which need to be identified and separated from noise or irrelevant outliers.
Three broad categories of anomaly detection techniques exist. Supervised anomaly detection techniques require a data set that has been labeled as "normal" and "abnormal" and involves training a classifier. However, this approach is rarely used in anomaly detection due to the general unavailability of labelled data and the inherent unbalanced nature of the classes. Semi-supervised anomaly detection techniques assume that some portion of the data is labelled. This may be any combination of the normal or anomalous data, but more often than not the techniques construct a model representing normal behavior from a given normal training data set, and then test the likelihood of a test instance to be generated by the model. Unsupervised anomaly detection techniques assume the data is unlabelled and are by far the most commonly used due to their wider and relevant application.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  language  = {en},
  url       = {https://en.wikipedia.org/w/index.php?title=Anomaly_detection&oldid=1153438169},
  urldate   = {2023-05-26},
}

'
@Misc{sklearn_outlier_detection,
  title    = {2.7. {Novelty} and {Outlier} {Detection}},
  abstract = {Many applications require being able to decide whether a new observation belongs to the same distribution as existing observations (it is an inlier), or should be considered as different (it is an ...},
  journal  = {scikit-learn},
  language = {en},
  url      = {https://scikit-learn/stable/modules/outlier_detection.html},
  urldate  = {2023-06-03},
}

'
@Misc{sklearn_clustering,
  title    = {2.3. {Clustering}},
  abstract = {Clustering of unlabeled data can be performed with the module sklearn.cluster. Each clustering algorithm comes in two variants: a class, that implements the fit method to learn the clusters on trai...},
  journal  = {scikit-learn},
  language = {en},
  url      = {https://scikit-learn/stable/modules/clustering.html},
  urldate  = {2023-06-03},
}

'
@inproceedings{liu_isolation_2008,
	address = {Pisa, Italy},
	title = {Isolation {Forest}},
	isbn = {9780769535029},
	url = {http://ieeexplore.ieee.org/document/4781136/},
	doi = {10.1109/ICDM.2008.17},
	urldate = {2023-06-03},
	booktitle = {2008 {Eighth} {IEEE} {International} {Conference} on {Data} {Mining}},
	publisher = {IEEE},
	author = {Liu, Fei Tony and Ting, Kai Ming and Zhou, Zhi-Hua},
	month = dec,
	year = {2008},
	pages = {413--422},
}

@Comment{jabref-meta: databaseType:bibtex;}
